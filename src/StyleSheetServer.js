/**

glamorousComponentFactory calls css() internally and relies on glamor to render the css. To render on server,
glamorous will collect all of the calls to css() (inside of the callback) and generated css will be return.

Along with the css, it will also return the generated html and array of ids to rehydrate the styles that have been
inserted into the page.

To perform rehydration, the list of ids (generated class names by glamor) will be passed as an argument to rehydrate().

*/

import {renderStatic} from 'glamor/server'
import {rehydrate} from 'glamor'

const StyleSheetServer = {
  renderStaticMarkup(fn) {
    if (!fn || typeof fn !== 'function') {
      throw new Error(
        `renderStaticMarkup expects a callback to render the component. You provided a ${typeof fn} instead.
				 Pass a callback, ReactDOMServer.renderToString(<Component />) or ReactDOMServer.renderToStaticMarkup(<Component />).
				`,
      )
    }
    // This will continue to work till glamorous changes its way to call css() internally using glamor (because it collects all the calls to css()).
    const data = renderStatic(fn) // { html, css, ids, rules }

    return {
      html: data.html,
      css: {
        content: data.css,
        renderedClassNames: data.ids, // List of ids for performing rehydration on server.
      },
    }
  },

  // Call glamor's rehydrate implicitly since we rely on glamor ðŸ˜…
  rehydrate(classNames /* string[] */) {
    // This maps class names (ids) generated by glamor to true.
    // This will tell React that markup is rendered by the server and it should mount in hydration mode.
    rehydrate(classNames)

    // Or, we can use this which is also similar

    // let injectingContainer = {};

    // classNames.forEach(className => {
    // 	injectingContainer[className] = true;
    // });
  },
}

// Example

// const { html, css } = StyleSheetServer.renderStaticMarkup(ReactDOMServer.renderToString(<App />));

// From glamor docs
// return `
// 	<html>
// 	  <head>
// 	    <!-- to avoid certain characters getting encoded
// 	      as html entities (like quotes in css 'content' property),
// 	      we use dangerouslySetInnerHTML to inject our css
// 	    -->
// 	    <style dangerouslySetInnerHTML={{ __html: css.content }} />
// 	    <!-- alternatively, you'd save the css to a file
// 	      and include it here with
// 	    <link rel='stylesheet' href='path/to/css'/>
// 	     -->
// 	  </head>
// 	  <body>
// 	    <div id='app'>${html}</div>
// 	    <script>
// 	      window._glamorous = ${JSON.stringify(css.renderedClassNames)}
// 	    </script>
// 	    <script src="bundle.js"></script>
// 	  </body>
// 	</html>
// `

// import { StyleSheetServer } from 'glamorous';

// StyleSheetServer.rehydrate(window._glamorous);

// ReactDOM.render(<App />, document.getElementById('app'));
